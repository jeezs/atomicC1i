Opal.modules["application/home"] = function(Opal) {/* Generated by Opal 1.7.2 */
  var $def = Opal.def, $hash2 = Opal.hash2, self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('reset_size,infos,title,clear_page,fill_image,fill_title,section_links,fill_color,fill_text,fill_web,fill_video');
  
  
  $def(self, '$home', function $$home() {
    var self = this;

    
    self.$reset_size();
    self.$infos("Comme Une Image ... la société de rérénce pour les vidéos professionelles sur la région AURA");
    self.$title("homepage");
    self.$clear_page();
    self.$fill_image("Court", "Cam1", "Application", "concert");
    self.$fill_title("Réalisation", "Captation", "Diffusion", "Compétences");
    return self.$section_links("real", "capt", "diff", "comp");
  });
  
  $def(self, '$real', function $$real() {
    var self = this, text_found = nil;

    
    self.$title("Réalisation");
    self.$clear_page();
    self.$fill_image("dance", nil, "reali_1", "Drone");
    self.$section_links("real", "capt", "diff", "comp");
    text_found = "Sylvain Godard crée la société de production audiovisuelle Comme une Image en 2001. Elle déploie son activité autour de productions exécutives internationales, locales, et réalise des projets multimédia pour des entreprises de tous secteurs (Banque, industriel, culturel…). Mue par son attrait pour les technologies innovantes et son énergie créative, Comme une Image a produit de nombreux projets.";
    self.$fill_color(nil, $hash2(["red", "green", "blue"], {"red": 0, "green": 0.3, "blue": 0.3}), nil);
    return self.$fill_text(nil, text_found);
  });
  
  $def(self, '$capt', function $$capt() {
    var self = this;

    
    self.$title("Captation");
    self.$clear_page();
    self.$fill_image(nil, "roue", "Video_Prod1", "Plateau");
    self.$fill_text(nil, nil, nil);
    self.$fill_web("usQDazZKWAk");
    return self.$section_links("real", "capt", "diff", "comp");
  });
  
  $def(self, '$diff', function $$diff() {
    var self = this, txt_found = nil;

    
    self.$title("Diffusion");
    self.$clear_page();
    self.$fill_image("website", nil, nil, "AR2");
    self.$fill_video(nil, "madmax");
    self.$fill_color(nil, nil, $hash2(["red", "green", "blue"], {"red": 0.3, "green": 0, "blue": 0.3}));
    txt_found = "Nous savons intégrer vos vidéos dans une application compatible web, smartphone ou autonome.  La lecture interactive  des vidéos, et une navigation selon vos  propres critères,  permet une expérience de diffusion ludique et moderne pour vos utilisateurs et clients. ";
    self.$fill_text(nil, nil, txt_found, nil);
    return self.$section_links("real", "capt", "diff", "comp");
  });
  return $def(self, '$comp', function $$comp() {
    var self = this;

    
    self.$title("Compétences");
    self.$clear_page();
    self.$fill_image("3D", "interactive", "Studio3", "Drone");
    return self.$section_links("real", "capt", "diff", "comp");
  });
};

Opal.queue(function(Opal) {/* Generated by Opal 1.7.2 */
  var $def = Opal.def, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $return_val = Opal.return_val, $eqeq = Opal.eqeq, $truthy = Opal.truthy, $rb_divide = Opal.rb_divide, $gvars = Opal.gvars, $rb_times = Opal.rb_times, self = Opal.top, $nesting = [], nil = Opal.nil;
  if ($gvars.window == null) $gvars.window = nil;

  Opal.add_stubs('box,grab,value,set,browser_object,id,require,[],style,text,image,touch,home,alert,matrix,color,attached,data,unbind,cell,each,children,==,to_s,delete,web,video,send,/,height,width,resize,view,*,on,reset_size');
  
  
  // This const is used to store and get all atome created canvas by id
const Atome_canvas={}
;
  
  $def(self, '$experiments', function $$experiments(parent, image) {
    
    

var img = new Image();
img.src = image;
img.onload = function() {
    var fab_canvas = new fabric.Canvas(parent);
Atome_canvas.myCanvasId=fab_canvas
 var image = new fabric.Image(img);
image.hasControls = false; // hide the helpers
image.selectable = false; // make the image unselectable
image.hoverCursor = 'default'; // Change the cursor
image.evented = false;// Deactivate the lasso
fab_canvas.selection = false //make the canvas unselectable (no lasso possible on the whole canvas)
 image.id= 'myImageId';
    fab_canvas.add(image);
  fab_canvas.getObjects().forEach(function(o) {
          if(o.id == 'myImageId') {
            o.scaleToHeight(100)
        o.scaleToWidth(100)
o.filters.push(new fabric.Image.filters.BlendColor({color: 'blue'}));
o.applyFilters();
          }
      })
}


setTimeout(() => {

var getted_canvas = Atome_canvas.myCanvasId
var rect = new fabric.Rect({
  left: 100,
  top: 100,
  fill: 'blue',
  width: 20,
  height: 20,
  angle: 45

});

getted_canvas.add(rect);
   getted_canvas.getObjects().forEach(function(o) {
          if(o.id == 'myImageId') {
delete o.filters[0]; // delete the previous filter

o.filters.push(new fabric.Image.filters.BlendColor({color: 'green'}));
o.applyFilters();
          }
      })

}, 2000)


  });
  
  $def(self, '$experiment', function $$experiment(parent, image) {
    
    

const canvas = new fabric.Canvas("view", {
 width:500,
 height:500,
 //backgroundColor:"White"
});

fabric.Image.fromURL(image,(img) => {
 // the scaleToHeight property is use to set the image height
    img.scaleToHeight(150)
 // scaleToWidth is use to set the image width
    img.scaleToWidth(150)
    canvas.add(img)
})
canvas.renderAll()





  });
  (function($base, $super) {
    var self = $klass($base, $super, 'Atome');

    
    
    
    $def(self, '$cimage', function $$cimage(params, parent_found) {
      var self = this, back = nil, created_url = nil, created_path = nil;

      
      if (params == null) params = nil;
      if (parent_found == null) parent_found = "view";
      back = self.$grab(parent_found.$value()).$box();
      back.$set($hash2(["width", "left", "height", "top"], {"width": "100%", "left": 0, "height": "100%", "top": 0}));
      back.$browser_object();
      back.$box($hash2(["width", "left", "height", "top", "color"], {"width": "100%", "left": 0, "height": "100%", "top": 0, "color": $hash2(["alpha"], {"alpha": 0})}));
      created_url = "'./medias/images/" + (params) + "'";
      created_path = "url(" + (created_url) + ")";
      
let maskedDiv = document.getElementById(back.$id());
  maskedDiv.style.backgroundImage = created_path;
  maskedDiv.style.maskImage = created_path;
  maskedDiv.style.backgroundSize = 'fit';
 maskedDiv.style.backgroundPosition = 'center';
 maskedDiv.style.backgroundRepeat = 'no-repeat';
maskedDiv.style.maskMode = 'alpha';
 maskedDiv.style.maskRepeat = 'no-repeat';
maskedDiv.style.maskSize = '100%';
 maskedDiv.style.maskPosition = 'center';

colorizer=maskedDiv.firstElementChild
;
      return back;
    }, -1);
    return $def(self, '$colorize', function $$colorize(params, mode) {
      var self = this;

      
      if (mode == null) mode = "multiply";
      
    let maskedDiv = document.getElementById(self.$id());
//maskedDiv.style.filter = "grayscale(100%)"
colorizer=maskedDiv.firstElementChild;
colorizer.style.backgroundColor = params;
colorizer.style.mixBlendMode = mode;

;
    }, -2);
  })($nesting[0], null);
  self.$require("application/home");
  
  $def(self, '$style', function $$style() {
    var base_size = nil, header = nil, footer = nil, icon_size = nil;

    
    base_size = 50;
    header = 90;
    footer = 50;
    icon_size = 19;
    return $hash2(["titles", "infos", "title", "base_size", "web_shadow", "header", "footer", "logo", "c1i", "content", "rubriques", "mail", "facebook", "instagram", "vimeo", "section", "label_color", "text_color", "text"], {"titles": "orange", "infos": $hash2(["width", "height", "left", "top", "visual", "center"], {"width": "90%", "height": "90%", "left": 3, "top": 3, "visual": $hash2(["size"], {"size": 15}), "center": true}), "title": $hash2(["center", "top", "bottom", "id", "data", "color", "visual"], {"center": "horizontal", "top": "auto", "bottom": 3, "id": "title", "data": "title", "color": $hash2(["red", "green", "blue"], {"red": 0.5, "green": 0.5, "blue": 0.5}), "visual": $hash2(["size"], {"size": 19})}), "base_size": base_size, "web_shadow": $hash2(["blur", "left", "top", "id"], {"blur": 16, "left": 3, "top": 3, "id": "web_shadow"}), "header": $hash2(["id", "left", "right", "height", "top", "bottom", "width", "overflow", "color"], {"id": "header", "left": 0, "right": 0, "height": header, "top": 0, "bottom": "auto", "width": "auto", "overflow": "visible", "color": $hash2(["red", "green", "blue"], {"red": 0.15, "green": 0.15, "blue": 0.15})}), "footer": $hash2(["id", "left", "right", "height", "bottom", "top", "width", "color"], {"id": "footer", "left": 0, "right": 0, "height": footer, "bottom": 0, "top": "auto", "width": "auto", "color": $hash2(["red", "green", "blue"], {"red": 0.1, "green": 0.1, "blue": 0.1})}), "logo": $hash2(["id", "height", "path", "width", "top", "left"], {"id": "logo", "height": 39, "path": "./medias/images/c1i_logo.svg", "width": "9%", "top": 19, "left": 19}), "c1i": $hash2(["id", "bottom", "left", "right", "height", "path", "width", "center", "top"], {"id": "c1i", "bottom": base_size, "left": 0, "right": 0, "height": "auto", "path": "./medias/images/c1i_text.svg", "width": "39%", "center": "horizontal", "top": 20}), "content": $hash2(["id", "top", "bottom", "left", "right", "width", "height", "overflow", "color"], {"id": "content", "top": header, "bottom": footer, "left": 0, "right": 0, "width": "auto", "height": "auto", "overflow": "auto", "color": $hash2(["red", "green", "blue"], {"red": 0.15, "green": 0.15, "blue": 0.15})}), "rubriques": $hash2(["id", "left", "width", "height", "parents", "columns", "rows", "color", "cells"], {"id": "rubriques", "left": 0, "width": 300, "height": 300, "parents": ["content"], "columns": $hash2(["count"], {"count": 2}), "rows": $hash2(["count"], {"count": 2}), "color": $hash2(["red", "green", "blue"], {"red": 0.15, "green": 0.15, "blue": 0.15}), "cells": $hash2(["particles"], {"particles": $hash2(["margin", "color", "smooth", "shadow"], {"margin": 15, "color": $hash2(["red", "green", "blue"], {"red": 0.15, "green": 0.15, "blue": 0.15}), "smooth": 0, "shadow": $hash2(["blur", "left", "top"], {"blur": 16, "left": 3, "top": 3})})})}), "mail": $hash2(["center", "top", "bottom", "width", "height", "left", "id", "path"], {"center": "vertical", "top": "auto", "bottom": 0, "width": icon_size, "height": icon_size, "left": 10, "id": "mail", "path": "./medias/images/icons/mail_orange.svg"}), "facebook": $hash2(["center", "top", "bottom", "width", "height", "left", "id", "path"], {"center": "vertical", "top": "auto", "bottom": 0, "width": icon_size, "height": icon_size, "left": 60, "id": "facebook", "path": "./medias/images/logos/orange/Facebook.svg"}), "instagram": $hash2(["center", "top", "bottom", "width", "height", "left", "id", "path"], {"center": "vertical", "top": "auto", "bottom": 0, "width": icon_size, "height": icon_size, "left": 110, "id": "instagram", "path": "./medias/images/logos/orange/instagram.svg"}), "vimeo": $hash2(["center", "top", "bottom", "width", "height", "left", "id", "path"], {"center": "vertical", "top": "auto", "bottom": 0, "width": icon_size, "height": icon_size, "left": 160, "id": "vimeo", "path": "./medias/images/logos/orange/vimeo.svg"}), "section": $hash2(["width", "height", "visual"], {"width": "100%", "height": "100%", "visual": $hash2(["size"], {"size": 15})}), "label_color": $hash2(["id", "red", "green", "blue"], {"id": "label_color", "red": 0.7, "green": 0.7, "blue": 0.7}), "text_color": $hash2(["id", "red", "green", "blue"], {"id": "text_color", "red": 0.7, "green": 0.7, "blue": 0.7}), "text": $hash2(["visual"], {"visual": $hash2(["size"], {"size": 14})})});
  });
  self.$box(self.$style()['$[]']("content"));
  self.$box(self.$style()['$[]']("header"));
  self.$box(self.$style()['$[]']("footer"));
  self.$text(self.$style()['$[]']("title"));
  self.$image(self.$style()['$[]']("logo"));
  self.$image(self.$style()['$[]']("c1i"));
  self.$image(self.$style()['$[]']("mail"));
  self.$image(self.$style()['$[]']("facebook"));
  self.$image(self.$style()['$[]']("instagram"));
  self.$image(self.$style()['$[]']("vimeo"));
  $send(self.$grab("title"), 'touch', [true], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;

    return self.$home()}, {$$s: self});
  $send(self.$grab("mail"), 'touch', [true], function $$2(){
    
    var recipient = "contact@c1i.eu";
    var subject = "Demande de renseignement";
    var body = "Contenu de l'e-mail";
    window.location.href = "mailto:" + recipient + "?subject=" + subject + "&body=" + body;
});
  $send(self.$grab("facebook"), 'touch', [true], function $$3(){var self = $$3.$$s == null ? this : $$3.$$s;

    return self.$alert("facebookingthezuckerdequeu")}, {$$s: self});
  $send(self.$grab("instagram"), 'touch', [true], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s;

    return self.$alert("instagrumgrum")}, {$$s: self});
  $send(self.$grab("vimeo"), 'touch', [true], function $$5(){var self = $$5.$$s == null ? this : $$5.$$s;

    return self.$alert("vimeoingthebelette")}, {$$s: self});
  self.$matrix(self.$style()['$[]']("rubriques"));
  self.$color(self.$style()['$[]']("label_color"));
  self.$color(self.$style()['$[]']("text_color"));
  self.$grab("header").$attached(["logo", "c1i", "title"]);
  self.$grab("footer").$attached(["mail", "facebook", "instagram", "vimeo"]);
  
  $def(self, '$title', function $$title(text) {
    var self = this;

    return self.$grab("title").$data(text)
  });
  
  $def(self, '$infos', $return_val(nil));
  
  $def(self, '$clear_page', function $$clear_page() {
    var self = this, sections = nil;

    
    sections = self.$grab("rubriques");
    sections.$cell(0).$unbind("tap");
    sections.$cell(1).$unbind("tap");
    sections.$cell(2).$unbind("tap");
    sections.$cell(3).$unbind("tap");
    $send(sections.$cell(0).$children(), 'each', [], function $$6(child){var self = $$6.$$s == null ? this : $$6.$$s;

      
      if (child == null) child = nil;
      if ($eqeq(child.$to_s(), "rubriques")) {
        return nil
      } else if ($truthy(self.$grab(child))) {
        return self.$grab(child).$delete(true)
      } else {
        return nil
      };}, {$$s: self});
    $send(sections.$cell(1).$children(), 'each', [], function $$7(child){var self = $$7.$$s == null ? this : $$7.$$s;

      
      if (child == null) child = nil;
      if ($eqeq(child.$to_s(), "rubriques")) {
        return nil
      } else if ($truthy(self.$grab(child))) {
        return self.$grab(child).$delete(true)
      } else {
        return nil
      };}, {$$s: self});
    $send(sections.$cell(2).$children(), 'each', [], function $$8(child){var self = $$8.$$s == null ? this : $$8.$$s;

      
      if (child == null) child = nil;
      if ($eqeq(child.$to_s(), "rubriques")) {
        return nil
      } else if ($truthy(self.$grab(child))) {
        return self.$grab(child).$delete(true)
      } else {
        return nil
      };}, {$$s: self});
    return $send(sections.$cell(3).$children(), 'each', [], function $$9(child){var self = $$9.$$s == null ? this : $$9.$$s;

      
      if (child == null) child = nil;
      if ($eqeq(child.$to_s(), "rubriques")) {
        return nil
      } else if ($truthy(self.$grab(child))) {
        return self.$grab(child).$delete(true)
      } else {
        return nil
      };}, {$$s: self});
  });
  
  $def(self, '$fill_image', function $$fill_image(im1, im2, im3, im4, _im5) {
    var self = this, sections = nil;

    
    if (im1 == null) im1 = nil;
    if (im2 == null) im2 = nil;
    if (im3 == null) im3 = nil;
    if (im4 == null) im4 = nil;
    if (_im5 == null) _im5 = nil;
    sections = self.$grab("rubriques");
    if ($truthy(im1)) {
      sections.$cell(0).$image($hash2(["path", "width", "height"], {"path": "./medias/images/" + (im1) + ".jpg", "width": "100%", "height": "100%"}))
    };
    if ($truthy(im2)) {
      sections.$cell(1).$image($hash2(["path", "width", "height"], {"path": "./medias/images/" + (im2) + ".jpg", "width": "100%", "height": "100%"}))
    };
    if ($truthy(im3)) {
      sections.$cell(2).$image($hash2(["path", "width", "height"], {"path": "./medias/images/" + (im3) + ".jpg", "width": "100%", "height": "100%"}))
    };
    if ($truthy(im4)) {
      return sections.$cell(3).$image($hash2(["path", "width", "height"], {"path": "./medias/images/" + (im4) + ".jpg", "width": "100%", "height": "100%"}))
    } else {
      return nil
    };
  }, -1);
  
  $def(self, '$fill_title', function $$fill_title(t1, t2, t3, t4, _t5) {
    var self = this, sections = nil;

    
    if (t1 == null) t1 = nil;
    if (t2 == null) t2 = nil;
    if (t3 == null) t3 = nil;
    if (t4 == null) t4 = nil;
    if (_t5 == null) _t5 = nil;
    return (sections = self.$grab("rubriques"));
  }, -1);
  
  $def(self, '$fill_text', function $$fill_text(t1, t2, t3, t4, _t5) {
    var self = this, sections = nil;

    
    if (t1 == null) t1 = nil;
    if (t2 == null) t2 = nil;
    if (t3 == null) t3 = nil;
    if (t4 == null) t4 = nil;
    if (_t5 == null) _t5 = nil;
    sections = self.$grab("rubriques");
    if ($truthy(t1)) {
      sections.$cell(0).$text($hash2(["data", "width", "height", "visual", "attached"], {"data": t1, "width": "100%", "height": "100%", "visual": $hash2(["size"], {"size": 12}), "attached": "text_color"}), $hash2(["center"], {"center": true}))
    };
    if ($truthy(t2)) {
      sections.$cell(1).$text($hash2(["data", "width", "height", "visual", "attached", "center"], {"data": t2, "width": "100%", "height": "100%", "visual": $hash2(["size"], {"size": 12}), "attached": "text_color", "center": true}))
    };
    if ($truthy(t3)) {
      sections.$cell(2).$text($hash2(["data", "width", "height", "visual", "attached", "center"], {"data": t3, "width": "89%", "height": "100%", "visual": $hash2(["size"], {"size": 12}), "attached": "text_color", "center": true}))
    };
    if ($truthy(t4)) {
      return sections.$cell(3).$text($hash2(["data", "width", "height", "visual", "attached", "center"], {"data": t4, "width": "100%", "height": "100%", "visual": $hash2(["size"], {"size": 12}), "attached": "text_color", "center": true}))
    } else {
      return nil
    };
  }, -1);
  
  $def(self, '$fill_color', function $$fill_color(c1, c2, c3, c4, _c5) {
    var self = this, sections = nil;

    
    if (c1 == null) c1 = nil;
    if (c2 == null) c2 = nil;
    if (c3 == null) c3 = nil;
    if (c4 == null) c4 = nil;
    if (_c5 == null) _c5 = nil;
    sections = self.$grab("rubriques");
    if ($truthy(c1)) {
      sections.$cell(0).$color(c1)
    };
    if ($truthy(c2)) {
      sections.$cell(1).$color(c2)
    };
    if ($truthy(c3)) {
      sections.$cell(2).$color(c3)
    };
    if ($truthy(c4)) {
      return sections.$cell(3).$color(c4)
    } else {
      return nil
    };
  }, -1);
  
  $def(self, '$fill_web', function $$fill_web(im1, im2, im3, im4, _im5) {
    var self = this, sections = nil;

    
    if (im1 == null) im1 = nil;
    if (im2 == null) im2 = nil;
    if (im3 == null) im3 = nil;
    if (im4 == null) im4 = nil;
    if (_im5 == null) _im5 = nil;
    sections = self.$grab("rubriques");
    if ($truthy(im1)) {
      sections.$cell(0).$web($hash2(["path", "width", "height"], {"path": "https://www.youtube.com/embed/" + (im1), "width": "100%", "height": "100%"}))
    };
    if ($truthy(im2)) {
      sections.$cell(1).$web($hash2(["path", "width", "height"], {"path": "https://www.youtube.com/embed/" + (im2), "width": "100%", "height": "100%"}))
    };
    if ($truthy(im3)) {
      sections.$cell(2).$web($hash2(["path", "width", "height"], {"path": "https://www.youtube.com/embed/" + (im3), "width": "100%", "height": "100%"}))
    };
    if ($truthy(im4)) {
      return sections.$cell(3).$web($hash2(["path", "width", "height"], {"path": "https://www.youtube.com/embed/" + (im4), "width": "100%", "height": "100%"}))
    } else {
      return nil
    };
  }, -1);
  
  $def(self, '$fill_video', function $$fill_video(im1, im2, im3, im4, _im5) {
    var self = this, sections = nil;

    
    if (im1 == null) im1 = nil;
    if (im2 == null) im2 = nil;
    if (im3 == null) im3 = nil;
    if (im4 == null) im4 = nil;
    if (_im5 == null) _im5 = nil;
    sections = self.$grab("rubriques");
    if ($truthy(im1)) {
      sections.$cell(0).$video($hash2(["path", "width", "height"], {"path": "./medias/videos/" + (im1) + ".mp4", "width": "100%", "height": "100%"}))
    };
    if ($truthy(im2)) {
      sections.$cell(1).$image($hash2(["path", "width", "height"], {"path": "./medias/videos/" + (im2) + ".mp4", "width": "100%", "height": "100%"}))
    };
    if ($truthy(im3)) {
      sections.$cell(2).$image($hash2(["path", "width", "height"], {"path": "./medias/videos/" + (im3) + ".mp4", "width": "100%", "height": "100%"}))
    };
    if ($truthy(im4)) {
      return sections.$cell(3).$image($hash2(["path", "width", "height"], {"path": "./medias/videos/" + (im4) + ".mp4", "width": "100%", "height": "100%"}))
    } else {
      return nil
    };
  }, -1);
  
  $def(self, '$section_links', function $$section_links(link1, link2, link3, link4, link5) {
    var self = this;

    
    if (link1 == null) link1 = "page1";
    if (link2 == null) link2 = "page";
    if (link3 == null) link3 = "page3";
    if (link4 == null) link4 = "page4";
    if (link5 == null) link5 = "infos";
    $send(self.$grab("rubriques").$cell(0), 'touch', [true], function $$10(){var self = $$10.$$s == null ? this : $$10.$$s;

      return self.$send(link1)}, {$$s: self});
    $send(self.$grab("rubriques").$cell(1), 'touch', [true], function $$11(){var self = $$11.$$s == null ? this : $$11.$$s;

      return self.$send(link2)}, {$$s: self});
    $send(self.$grab("rubriques").$cell(2), 'touch', [true], function $$12(){var self = $$12.$$s == null ? this : $$12.$$s;

      return self.$send(link3)}, {$$s: self});
    return $send(self.$grab("rubriques").$cell(3), 'touch', [true], function $$13(){var self = $$13.$$s == null ? this : $$13.$$s;

      return self.$send(link4)}, {$$s: self});
  }, -1);
  
  $def(self, '$reset_size', function $$reset_size() {
    var self = this, section = nil, matrix_ratio = nil;
    if ($gvars.window == null) $gvars.window = nil;

    
    section = self.$grab("rubriques");
    matrix_ratio = $rb_divide(section.$height().$value(), section.$width().$value());
    return section.$resize($gvars.window.$view().$width(), $rb_times($gvars.window.$view().$width(), matrix_ratio));
  });
  $send($gvars.window, 'on', ["resize"], function $$14(){var self = $$14.$$s == null ? this : $$14.$$s;

    return self.$reset_size()}, {$$s: self});
  return self.$home();
});
